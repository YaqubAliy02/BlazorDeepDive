@page "/servers"
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<h3>Servers</h3>
<br />
<br />
<div class="container text-center" >
    <div class="row w-75">
        @foreach (var city in cities)
        {
            <div class="col">
                <div class="card @(selectedCity.Equals(city, StringComparison.OrdinalIgnoreCase)? "border-primary" : "")">
                    <img src="@($"/images/{city}.png")" class="card-img-top" alt="...">
                    <div class="card-body">
                        <button type="button" class="btn btn-outline-info" @onclick="(() => {SelectCity(city); })">@city</button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
<br />

<div class="input-group mb-3">
    <input type="text" class="form-control" placeholder="Search Server" @onchange="HandleServerFilterChange"/>
    <button class="btn btn-outline-secondary" type="button" id="button-search" @onclick="HandleSearch">Search</button> 
</div>
<br />
<ul>
    @foreach (var server in servers)
    {
        <li>
            @server.Name in @server.City is
            <span style="color: @(server.IsOnline? "green" : "red")">
                @(server.IsOnline ? "online" : "offline")
            </span>
            &nbsp;
            <a href="/servers/@server.Id" class="link-primary">Edit</a>
            &nbsp;
            <EditForm Model="server"
                      FormName="@($"form-server-{server.Id}")"
                      OnValidSubmit="@(() =>{DeleteServer(server.Id); })">
                <button type="submit" class="btn btn-primary">Delete</button>
            </EditForm>
        </li>
    }
</ul>

<a href="/servers/add">Add Server</a>

@code {
    private List<Server> servers = ServersRepository.GetServersByCity("Toronto");
    private List<String> cities = CitiesRepository.GetCities();
    private string selectedCity = "Toronto";
    private string serverFilter = "";
    private void DeleteServer(int serverId)
    {
        if (serverId > 0)
        {
            ServersRepository.DeleteServer(serverId);
            NavigationManager.NavigateTo("/servers");
        }
    }

    private void SelectCity(string cityName)
    {
        this.selectedCity = cityName;
        this.servers = ServersRepository.GetServersByCity(cityName);
    }

    private void HandleServerFilterChange(ChangeEventArgs args)
    {
        serverFilter = args.Value?.ToString() ?? string.Empty;
    }
    private void HandleSearch()
    {
        this.servers = ServersRepository.SearchServers(serverFilter);
        this.selectedCity = string.Empty;
    }
}
