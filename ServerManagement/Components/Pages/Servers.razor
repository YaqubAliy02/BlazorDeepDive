@page "/servers"
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<h3>Servers</h3>
<br />
<br />
<div class="container text-center">
    <div class="row w-75">
        @foreach (var city in cities)
        {
            <div class="col">
                <div class="card @(selectedCity.Equals(city, StringComparison.OrdinalIgnoreCase)? "border-primary" : "")">
                    <img src="@($"/images/{city}.png")" class="card-img-top" alt="...">
                    <div class="card-body">
                        <button type="button" class="btn btn-outline-info" @onclick="(() => {SelectCity(city); })">@city</button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
<br />

<div class="input-group mb-3">
    <input type="text" class="form-control" placeholder="Search Server" @onchange="HandleServerFilterChange" />
    <button class="btn btn-outline-secondary" type="button" id="button-search" @onclick="HandleSearch">Search</button>
</div>
<br />

<ServerListComponent @rendermode="InteractiveServer" CityName="@this.selectedCity"></ServerListComponent>

<p>
    <a href="/servers/add" class="btn btn-primary">Add Server</a>
</p>

@code {
    private List<String> cities = CitiesRepository.GetCities();
    private string selectedCity = "Toronto";
    private string serverFilter = "";

    private void SelectCity(string cityName)
    {
        this.selectedCity = cityName;
        // this.servers = ServersRepository.GetServersByCity(cityName);
    }

    private void HandleServerFilterChange(ChangeEventArgs args)
    {
        serverFilter = args.Value?.ToString() ?? string.Empty;
    }
    private void HandleSearch()
    {
        // this.servers = ServersRepository.SearchServers(serverFilter);
        this.selectedCity = string.Empty;
    }
}
